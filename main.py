# Seminar6 Повторение списков
# Задача №39. Решение в группах Даны два массива чисел. Требуется вывести те элементы первого массива 
# (в том порядке, в каком они идут в первом массиве), которых нет во втором массиве. Пользователь вводит 
# число N - количество элементов в первом массиве, затем N чисел - элементы массива. Затем число M - 
# количество элементов во втором массиве. Затем элементы второго массива 
# Ввод:7 Вывод: 3 3 2 12 
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1(каждое число вводится с новой строки)
# # list_res = []

# len_test_list1 = 7#int(input('введите количество элементов '))
# test_list1 = [3 ,1 ,3, 4, 2 ,4, 12]

# len_text_list2 = 6#int(input('введите количество элементов '))
# test_list2 = [4 ,15, 43, 1, 15, 1]
# # 4 15 43 1 15 1

# #способ 1
# for i in test_list1:
#     if i not in test_list2:
#         list_res.append(i)
# print(list_res)

# #способ 2
# test_res = set(test_list 1)-set(test_list 2)
# print(test_res)
# for i in test_list1:
#     if i in test_res:
#         print(i)
# через функцию
# def serch_dif(list_1: list[int], list_2: list[int])-> list[int]:
#     list_res =[]
#     for i in list_1:
#         if i not in list_2:
#             list_res.append(i)
#     return list_res 
# print(serch_dif([1, 2, 3], [2, 3]))

# Задача №41. Решение в группах Дан массив, состоящий из целых чисел. Напишите программу,
# которая в данном массиве определит количество элементов, у которых два соседних и, при этом,
# оба соседних элемента меньше данного. Сначала вводится число N — количество элементов в массиве 
# Далее записаны N чисел — элементы массива. Массив состоит из целых чисел. 
# Ввод: Ввод: 55 1 2 3 4 51 5 1 5 1 Вывод:Вывод: 02 (каждое число вводится с новой строки)
# list_n = [1, 5, 1, 5, 1]
# count_top = function.find_top(list_n)
# print(count_top)
# def find_top(list_1: list) -> int:
#     count = 0
#     for i in range(1, len(list_1) - 1):
#         if list_1[i] > list_1[i - 1] and list_1[i] > list_1[i + 1]:
#             count += 1
#     return count


# Задача №43. Решение в группах Дан список чисел. Посчитайте, сколько в нем пар элементов, 
# равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список чисел. Все числа списка находятся на разных строках. 
# Ввод:1 2 3 2 3 Вывод: 2

# def how_many_pairs(new_list):
#     counter = 0
#     for i in range(len(new_list) - 1):
#         for j in range(i + 1, len(new_list)):
#             if new_list[i] == new_list[j]:
#                 counter += 1
#     return(counter)

# def make_a_list(n):
#     new_list = []
#     for i in range (n):
#         new_list.append(int(input("Input a num: ")))
#     return(new_list)
# new_list = make_a_list(int(input("Input a quantity of elements in list: ")))
# print(f"There are {how_many_pairs(new_list)} pairs in list")

# Задача №45. Решение в группах Два различных натуральных числа n и m называются дружественными, 
# если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. 
# Например, 220 и 284 – дружественные числа. По данному числу k выведите все пары дружественных чисел, 
# каждое из которых не превосходит k. Программа получает на вход одно натуральное число k, 
# не превосходящее 105. Программа должна вывести  все пары дружественных чисел,
# каждое из которых не превосходит k. Пары необходимо выводить по одной в строке, разделяя пробелами. 
# Каждая пара должна быть выведена только один раз (перестановка чисел новую пару не дает).
# Ввод:  300     Вывод: 220 284
# def find_sum_delitel(num: int) -> int:
#     summ = 0
#     for i in range(1, num // 2 + 1):
#         if (num % i == 0):
#             summ += i
#         return summ
# k = 300
# for num_1 in range(2, k):
#     num_2 = find_sum_delitel(num_1)

#     if (find_sum_delitel(num_2) == num_1) and (num_1 != num_2) and (num_1 < num_2):
#         print(num_1, num_2)